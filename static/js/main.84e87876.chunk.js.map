{"version":3,"sources":["components/Header/Header.tsx","components/Main/TodoList/TodoItem/TodoItemStyle.js","components/Main/TodoList/TodoItem/TodoItem.tsx","components/Main/Input/InputStyle.js","components/Main/Input/Input.tsx","components/Main/TodoList/TodoListStyle.js","components/Main/TodoList/TodoList.tsx","redux/main-reducer.ts","components/Main/TodoList/TodoListContainer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["Header","AppBar","position","Toolbar","variant","Typography","color","useStyles","makeStyles","card","marginTop","marginLeft","marginRight","mainRow","display","alignItems","justifyContent","row","TodoItem","props","styles","Card","className","CardContent","Checkbox","checked","completed","onChange","setCompleted","id","title","IconButton","onClick","removeTask","area-label","input","Input","style","useState","query","setQuery","TextField","onKeyPress","e","key","addTodo","Date","now","target","value","fullWidth","label","formControl","margin","minWidth","selectEmpty","emptyListTitle","textAlign","TodoList","chosenFilter","filter","setFilter","todos","map","t","todo","FormControl","InputLabel","Select","labelId","MenuItem","length","SET_TODOS","ADD_TODO","REMOVE_TASK","SET_COMPLETED","SET_FILTER","initialState","actions","setTodos","type","payload","connect","state","main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","task","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadFromLocalStorage","store","createStore","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEaA,EAAkC,WAC3C,OACI,cAACC,EAAA,EAAD,CAAQC,SAAW,SAAnB,SACI,cAACC,EAAA,EAAD,CAASC,QAAU,QAAnB,SACI,cAACC,EAAA,EAAD,CAAYD,QAAU,KAAKE,MAAQ,UAAnC,2B,yGCaDC,EAjBIC,YAAY,CAC3BC,KAAM,CACFC,UAAW,OACXC,WAAY,OACZC,YAAa,QAEjBC,QAAS,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAEpBC,IAAK,CACDH,QAAS,OACTC,WAAY,Y,iBCDPG,EAAwD,SAACC,GAClE,IAAMC,EAASb,IASf,OACI,cAACc,EAAA,EAAD,CAAMC,UAAaF,EAAOX,KAA1B,SACI,cAACc,EAAA,EAAD,UACI,sBAAKD,UAAaF,EAAOP,QAAzB,UACI,sBAAKS,UAAaF,EAAOH,IAAzB,UACI,cAACO,EAAA,EAAD,CAAUC,QAAWN,EAAMO,UAAWC,SATrC,WACjBR,EAAMS,aAAcT,EAAMU,KAQsDvB,MAAQ,YACxE,cAACD,EAAA,EAAD,CAAYD,QAAU,KAAtB,SACKe,EAAMW,WAGf,cAACC,EAAA,EAAD,CAAYC,QAjBT,WACfb,EAAMc,WAAYd,EAAMU,KAgBuBK,aAAW,mBAA9C,SACI,cAAC,IAAD,CAAY5B,MAAQ,wB,SC1B7BC,EAPGC,YAAY,CAC1B2B,MAAO,CACHxB,WAAY,OACZC,YAAa,UCIRwB,EAAkD,SAACjB,GAC5D,IAAMkB,EAAQ9B,IADwD,EAG1C+B,mBAAU,IAHgC,mBAG9DC,EAH8D,KAGvDC,EAHuD,KActE,OACI,qBAAKlB,UAAae,EAAMF,MAAxB,SACI,cAACM,EAAA,EAAD,CAAWC,WATA,SAACC,GACF,UAAVA,EAAEC,MACFzB,EAAM0B,QAASC,KAAKC,OAAQ,EAAOR,GACnCC,EAAU,MAM2Bb,SAZrB,SAACgB,GACrBH,EAAUG,EAAEK,OAAOC,QAWmDC,WAAa,EAAMrB,GAAG,iBAAiBsB,MAAM,oBAAoBF,MAASV,OCTzIhC,EAdIC,YAAY,CAC3B4C,YAAa,CACTC,OAAQ,OACRC,SAAU,KAEZC,YAAa,CACX7C,UAAW,QAEf8C,eAAgB,CACZC,UAAW,SACX/C,UAAW,UCYNgD,EAAuD,SAACvC,GACnE,IAMIwC,EANEtB,EAAQ9B,IAD+D,EAEjD+B,mBAAS,OAFwC,mBAEtEsB,EAFsE,KAE9DC,EAF8D,KAqD7E,MA7Ce,QAAXD,EACFD,EAAexC,EAAM2C,MAAMC,KAAI,SAACC,GAC9B,OACE,cAAC,EAAD,CAEElC,MAAOkC,EAAElC,MACTJ,UAAWsC,EAAEtC,UACbG,GAAImC,EAAEnC,GACNI,WAAYd,EAAMc,WAClBL,aAAcT,EAAMS,cALfoC,EAAEnC,OASO,WAAX+B,EACTD,EAAexC,EAAM2C,MAClBF,QAAO,SAACK,GAAD,OAA6B,IAAnBA,EAAKvC,aACtBqC,KAAI,SAACC,GACJ,OACE,cAAC,EAAD,CAEElC,MAAOkC,EAAElC,MACTJ,UAAWsC,EAAEtC,UACbG,GAAImC,EAAEnC,GACNI,WAAYd,EAAMc,WAClBL,aAAcT,EAAMS,cALfoC,EAAEnC,OASK,cAAX+B,IACTD,EAAexC,EAAM2C,MAClBF,QAAO,SAACK,GAAD,OAA6B,IAAnBA,EAAKvC,aACtBqC,KAAI,SAACC,GACJ,OACE,cAAC,EAAD,CAEElC,MAAOkC,EAAElC,MACTJ,UAAWsC,EAAEtC,UACbG,GAAImC,EAAEnC,GACNI,WAAYd,EAAMc,WAClBL,aAAcT,EAAMS,cALfoC,EAAEnC,QAYf,gCACE,cAAC,EAAD,CAAOgB,QAAS1B,EAAM0B,UACtB,8BACE,eAACqB,EAAA,EAAD,CAAa5C,UAAWe,EAAMe,YAA9B,UACE,cAACe,EAAA,EAAD,CAAYtC,GAAG,2BAAf,oBACA,eAACuC,EAAA,EAAD,CACEC,QAAQ,2BACRxC,GAAG,qBACHoB,MAAOW,EACPjC,SA3DW,SAACgB,GACpBkB,EAAUlB,EAAEK,OAAOC,QAsDb,UAME,cAACqB,EAAA,EAAD,CAAUrB,MAAO,MAAjB,iBACA,cAACqB,EAAA,EAAD,CAAUrB,MAAO,SAAjB,oBACA,cAACqB,EAAA,EAAD,CAAUrB,MAAO,YAAjB,+BAIJ,8BACK9B,EAAM2C,MAAMS,OACP,8BAAMZ,IACN,cAACtD,EAAA,EAAD,CAAYiB,UAAae,EAAMmB,eAAgBpD,QAAU,KAAzD,2C,QChGZoE,EAAY,YACZC,EAAW,WACXC,EAAc,cACdC,EAAgB,gBAChBC,EAAa,aAEbC,EAAe,CACnBf,MAAO,GACPF,OAAQ,OA4CGkB,EAAU,CACrBC,SAAU,SAACjB,GAAD,MAAqC,CAAEkB,KAAMR,EAAWV,UAClEjB,QAAS,SAAChB,EAAYH,EAAoBI,GAAjC,MAAoD,CAAEkD,KAAMP,EAAUQ,QAAS,CAAEpD,KAAIH,YAAWI,WACzGG,WAAY,SAACJ,GAAD,MAAiB,CAAEmD,KAAMN,EAAa7C,OAClDD,aAAc,SAACC,GAAD,MAAiB,CAAEmD,KAAML,EAAe9C,OACtDgC,UAAW,SAACD,GAAD,MAAqB,CAAEoB,KAAMJ,EAAYhB,YC/BvCsB,eANO,SAACC,GACrB,MAAO,CACLrB,MAAOqB,EAAMC,KAAKtB,SAIkB,CACtCjB,QAASiC,EAAQjC,QACjBZ,WAAY6C,EAAQ7C,WACpBL,aAAckD,EAAQlD,cAHTsD,EAXiE,SAAC/D,GAC/E,OAAO,cAAC,EAAD,eAAcA,OCFRkE,MAZf,WAEE,OACE,gCACE,cAAC,EAAD,IACA,qBAAK/D,UAAY,YAAjB,SACE,cAAC,EAAD,UCIOgE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCcRQ,EAAcC,YAAiB,CACjCZ,KJVuB,WAGH,IAFtBD,EAEqB,uDAFbN,EACRoB,EACqB,uCACrB,OAAQA,EAAOjB,MACb,KAAKR,EACH,OAAO,2BAAKW,GAAZ,IAAmBrB,MAAOmC,EAAOnC,QACnC,KAAKW,EACH,OAAO,2BACFU,GADL,IAEErB,MAAM,GAAD,mBAAMqB,EAAMrB,OAAZ,CAAmBmC,EAAOhB,YAEnC,KAAKP,EACH,OAAO,2BACFS,GADL,IAEErB,MAAM,YAAKqB,EAAMrB,MAAMF,QAAO,SAACsC,GAAD,OAAUA,EAAKrE,KAAOoE,EAAOpE,SAE/D,KAAK8C,EACH,OAAO,2BACFQ,GADL,IAEErB,MAAM,YACDqB,EAAMrB,MAAMC,KAAI,SAACmC,GAIlB,OAHIA,EAAKrE,KAAOoE,EAAOpE,KACrBqE,EAAKxE,WAAawE,EAAKxE,WAElBwE,QAIf,KAAKtB,EACH,OAAO,2BAAKO,GAAZ,IAAmBvB,OAAQqC,EAAOrC,SACpC,QACE,OAAOuB,MIhBPgB,EAlBuB,WACzB,IACI,IAAMC,EAAkBC,aAAaC,QAAS,SAC9C,GAAwB,OAApBF,EAA0B,OAC9B,OAAOG,KAAKC,MAAOJ,GACrB,MAAOK,GAEL,YADAC,QAAQC,IAAIF,IAYGG,GACVC,EAAQC,YAAaf,EAAaI,GAE/CU,EAAME,WAAY,kBA9BS,SAAC5B,GACxB,IACI,IAAMiB,EAAkBG,KAAKS,UAAW7B,GACxCkB,aAAaY,QAAS,QAASb,GACjC,MAAOK,GACLC,QAAQC,IAAIF,IAyBIS,CAAoBL,EAAMM,eCzBlDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAASA,EAAnB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1BlC,M","file":"static/js/main.84e87876.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@material-ui/core\"\r\n\r\nexport const Header: React.FunctionComponent = () => {\r\n    return (\r\n        <AppBar position = \"static\" >\r\n            <Toolbar variant = \"dense\" >\r\n                <Typography variant = \"h6\" color = \"inherit\" >\r\n                    Todo App\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles  = makeStyles ({\r\n    card: {\r\n        marginTop: \"15px\",\r\n        marginLeft: \"10px\",\r\n        marginRight: \"10px\",\r\n    },\r\n    mainRow: {\r\n        display: 'flex',\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: \"center\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import { useState } from \"react\"\r\nimport { Card, CardContent, Checkbox, Typography, IconButton } from \"@material-ui/core\"\r\nimport useStyles from \"./TodoItemStyle\"\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { RemoveTodoType } from \"../../../../types/types\"\r\n\r\ntype TodoItemPropsType = {\r\n    title: string,\r\n    id: number,\r\n    completed: boolean,\r\n    removeTask: RemoveTodoType,\r\n    setCompleted: (id: number) => void,\r\n}\r\n\r\nexport const TodoItem: React.FunctionComponent <TodoItemPropsType> = (props) => {\r\n    const styles = useStyles ()\r\n\r\n    const removeTask = () => {\r\n        props.removeTask (props.id)\r\n    }\r\n    const setCompleted = () => {\r\n        props.setCompleted (props.id)\r\n    }\r\n\r\n    return (\r\n        <Card className = {styles.card} >\r\n            <CardContent>\r\n                <div className = {styles.mainRow} >\r\n                    <div className = {styles.row} >\r\n                        <Checkbox checked = {props.completed} onChange = {setCompleted} color = \"primary\" />\r\n                        <Typography variant = \"h5\" >\r\n                            {props.title} \r\n                        </Typography>\r\n                    </div>\r\n                    <IconButton onClick = {removeTask} area-label=\"Delete from cart\" >\r\n                        <DeleteIcon color = \"secondary\" />\r\n                    </IconButton>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles ({\r\n    input: {\r\n        marginLeft: \"10px\",\r\n        marginRight: \"10px\",\r\n    },\r\n})\r\n\r\nexport default useStyles;","import { useState } from \"react\"\r\nimport { TextField } from \"@material-ui/core\"\r\nimport { AddTodoType } from \"../../../types/types\"\r\nimport useStyles from \"./InputStyle\"\r\n\r\ntype InputPropsType = {\r\n    addTodo: AddTodoType\r\n}\r\n\r\nexport const Input: React.FunctionComponent <InputPropsType> = (props) => {\r\n    const style = useStyles ()\r\n\r\n    const [ query, setQuery ] = useState (\"\") \r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setQuery (e.target.value)\r\n    }\r\n    const createTodo = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            props.addTodo (Date.now (), false, query)\r\n            setQuery (\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = {style.input} >\r\n            <TextField onKeyPress = {createTodo} onChange = {onChangeHandler} fullWidth = {true} id=\"standard-basic\" label=\"Enter new todo...\" value = {query} />\r\n        </div>\r\n    )\r\n}","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles  = makeStyles ({\r\n    formControl: {\r\n        margin: \"10px\",\r\n        minWidth: 120,\r\n    },\r\n      selectEmpty: {\r\n        marginTop: \"10px\",\r\n    },\r\n    emptyListTitle: {\r\n        textAlign: \"center\",\r\n        marginTop: \"70px\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import { useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  AddTodoType,\r\n  RemoveTodoType,\r\n  TodoListItemType,\r\n} from \"../../../types/types\";\r\nimport { TodoItem } from \"./TodoItem/TodoItem\";\r\nimport { Input } from \"../Input/Input\";\r\nimport useStyles from \"./TodoListStyle\";\r\n\r\ntype TodoListPropsType = {\r\n  todos: Array<TodoListItemType>;\r\n  addTodo: AddTodoType;\r\n  removeTask: RemoveTodoType;\r\n  setCompleted: (id: number) => void;\r\n};\r\n\r\nexport const TodoList: React.FunctionComponent<TodoListPropsType> = (props) => {\r\n  const style = useStyles(); // styles from Material-UI\r\n  const [filter, setFilter] = useState(\"All\");\r\n\r\n  const handleChange = (e: any) => {\r\n    setFilter(e.target.value);\r\n  };\r\n  let chosenFilter; // Filter wich is chosen right now\r\n  if (filter === \"All\") {\r\n    chosenFilter = props.todos.map((t) => {\r\n      return (\r\n        <TodoItem\r\n          key={t.id}\r\n          title={t.title}\r\n          completed={t.completed}\r\n          id={t.id}\r\n          removeTask={props.removeTask}\r\n          setCompleted={props.setCompleted}\r\n        />\r\n      );\r\n    });\r\n  } else if (filter === \"Active\") {\r\n    chosenFilter = props.todos\r\n      .filter((todo) => todo.completed === false)\r\n      .map((t) => {\r\n        return (\r\n          <TodoItem\r\n            key={t.id}\r\n            title={t.title}\r\n            completed={t.completed}\r\n            id={t.id}\r\n            removeTask={props.removeTask}\r\n            setCompleted={props.setCompleted}\r\n          />\r\n        );\r\n      });\r\n  } else if (filter === \"Completed\") {\r\n    chosenFilter = props.todos\r\n      .filter((todo) => todo.completed === true)\r\n      .map((t) => {\r\n        return (\r\n          <TodoItem\r\n            key={t.id}\r\n            title={t.title}\r\n            completed={t.completed}\r\n            id={t.id}\r\n            removeTask={props.removeTask}\r\n            setCompleted={props.setCompleted}\r\n          />\r\n        );\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Input addTodo={props.addTodo} />\r\n      <div>\r\n        <FormControl className={style.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Filter</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={filter}\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value={\"All\"}>All</MenuItem>\r\n            <MenuItem value={\"Active\"}>Active</MenuItem>\r\n            <MenuItem value={\"Completed\"}>Completed</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        </div>\r\n        <div>\r\n            {props.todos.length \r\n                ? <div>{chosenFilter}</div> \r\n                : <Typography className = {style.emptyListTitle} variant = \"h4\" >You dont have any todos</Typography>\r\n            }\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n","import { TodoListItemType } from \"./../types/types\";\r\n\r\nconst SET_TODOS = \"SET_TODOS\";\r\nconst ADD_TODO = \"ADD_TODO\";\r\nconst REMOVE_TASK = \"REMOVE_TASK\";\r\nconst SET_COMPLETED = \"SET_COMPLETED\";\r\nconst SET_FILTER = \"SET_FILTER\";\r\n\r\nconst initialState = {\r\n  todos: [] as Array<TodoListItemType>,\r\n  filter: \"All\",\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const MainReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_TODOS:\r\n      return { ...state, todos: action.todos };\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n    case REMOVE_TASK:\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos.filter((task) => task.id !== action.id)],\r\n      };\r\n    case SET_COMPLETED:\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos.map((task) => {\r\n            if (task.id === action.id) {\r\n              task.completed = !task.completed;\r\n            }\r\n            return task;\r\n          }),\r\n        ],\r\n      };\r\n    case SET_FILTER:\r\n      return { ...state, filter: action.filter };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Add type for each action\r\ntype PropertiesType<T> = T extends { [ket: string]: infer U } ? U : never;\r\ntype ActionsTypes = ReturnType<PropertiesType<typeof actions>>;\r\n\r\nexport const actions = {\r\n  setTodos: (todos: Array<TodoListItemType>) => ({ type: SET_TODOS, todos } as const),\r\n  addTodo: (id: number, completed: boolean, title: string) => ({ type: ADD_TODO, payload: { id, completed, title } } as const),\r\n  removeTask: (id: number) => ({ type: REMOVE_TASK, id } as const),\r\n  setCompleted: (id: number) => ({ type: SET_COMPLETED, id } as const),\r\n  setFilter: (filter: string) => ({ type: SET_FILTER, filter } as const),\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { TodoList } from \"./TodoList\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport {\r\n  AddTodoType,\r\n  RemoveTodoType,\r\n  TodoListItemType,\r\n} from \"../../../types/types\";\r\nimport { actions } from \"../../../redux/main-reducer\";\r\n\r\ntype TodoListContainerPropsTypes = {\r\n  todos: Array<TodoListItemType>;\r\n  addTodo: AddTodoType;\r\n  removeTask: RemoveTodoType;\r\n  setCompleted: (id: number) => void;\r\n};\r\n\r\nconst TodoListContainer: React.FunctionComponent<TodoListContainerPropsTypes> = (props) => {\r\n  return <TodoList {...props} />;\r\n};\r\n\r\n// Added type for state. In filer redux-store.ts\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    todos: state.main.todos,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  addTodo: actions.addTodo,\r\n  removeTask: actions.removeTask,\r\n  setCompleted: actions.setCompleted,\r\n})(TodoListContainer);\r\n","import './App.css';\nimport { Header } from \"./components/Header/Header\"\nimport TodoListContainer from \"./components/Main/TodoList/TodoListContainer\"\n\nfunction App() {\n  \n  return (\n    <div>\n      <Header />\n      <div className = \"container\" >\n        <TodoListContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { MainReducer } from './main-reducer';\r\nimport { combineReducers, createStore } from \"redux\";\r\n\r\nconst saveToLocalStorage = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify (state)\r\n        localStorage.setItem (\"state\", serializedState)\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nconst loadFromLocalStorage = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem (\"state\")\r\n        if (serializedState === null) return undefined\r\n        return JSON.parse (serializedState)\r\n    } catch (err) {\r\n        console.log(err);\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers ({\r\n    main: MainReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType <RootReducerType>\r\n\r\nconst persistedState = loadFromLocalStorage ()\r\nexport const store = createStore (rootReducer, persistedState)\r\n\r\nstore.subscribe ( () => saveToLocalStorage (store.getState ()) )","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/redux-store\"\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}